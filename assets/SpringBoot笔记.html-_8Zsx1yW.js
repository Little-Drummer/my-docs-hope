import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o as i,c as l,a as n,b as s,d as e,w as u,e as a}from"./app-Snwsx1we.js";const r="/assets/image-20230608112251533-KVs6VyCX.png",d={},k=a(`<h2 id="ioc容器" tabindex="-1"><a class="header-anchor" href="#ioc容器" aria-hidden="true">#</a> IOC容器</h2><p>Spring IOC是Spring框架中的一个重要概念，它代表着控制反转（Inversion of Control)。</p><p>控制反转是一种软件设计原则，它将对象或程序的某些部分的控制权交给容器或框架。在传统编程中，我们的代码调用库，而在控制反转中，框架接管了程序的流程并调用我们的代码。为了实现这一点，框架使用具有附加行为的抽象。如果我们想要添加自己的行为，我们需要扩展框架的类或插入自己的类。这种体系结构的优点是：解耦执行任务与其实现，使在不同实现之间切换更容易，程序更具模块化，通过隔离组件或模拟其依赖项更容易测试程序，并允许组件通过契约进行通信。我们可以通过各种机制实现控制反转，例如：策略设计模式、服务定位器模式、工厂模式和依赖注入（DI）。依赖注入是一种模式，我们可以使用它来实现控制反转，在这种情况下，被反转的控制是设置对象的依赖项。将对象与其他对象连接或将对象“注入”到其他对象中是由汇编器而不是对象本身完成的。</p><p>Spring IOC容器是Spring框架中用于实现IOC的核心部分之一。它负责创建对象、维护对象之间的关系以及管理它们的整个生命周期 ]通过使用Spring IOC容器，我们可以将应用程序中各个组件之间的依赖关系从代码中解耦出来，并将其配置在XML文件或Java注释中</p><h3 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h3><h4 id="lazy" tabindex="-1"><a class="header-anchor" href="#lazy" aria-hidden="true">#</a> @lazy</h4><p>Bean懒加载注解 加上lazy注解后会等到实例被第一次调用时才实例化</p><h4 id="autowried" tabindex="-1"><a class="header-anchor" href="#autowried" aria-hidden="true">#</a> @autowried</h4><p>autowried注解会将实例自动注入到变量中</p><h4 id="scope" tabindex="-1"><a class="header-anchor" href="#scope" aria-hidden="true">#</a> @Scope</h4><ul><li>prototype 多例bean 每次使用bean都会创建一个实例</li><li>singleton 单例bean</li></ul><h4 id="bean" tabindex="-1"><a class="header-anchor" href="#bean" aria-hidden="true">#</a> @Bean</h4><ul><li>如果要管理的bean对象来自于第三方〈不是自定义的)，是无法用@Component 及衍生注解声明bean的，就需要用到@Bean注解。</li><li>若要管理的第三方bean对象，建议对这些bean进行集中分类配置，可以通过@Configuration注解声明一个配置类。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanConfig</span> <span class="token punctuation">{</span>
<span class="token comment">//    @Bean</span>
<span class="token comment">//    public JwtUtils jwtUtils() {</span>
<span class="token comment">//        return new JwtUtils();</span>
<span class="token comment">//    }</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="将第三方模块中的bean加入到ioc" tabindex="-1"><a class="header-anchor" href="#将第三方模块中的bean加入到ioc" aria-hidden="true">#</a> 将第三方模块中的Bean加入到IOC</h3><h4 id="方案一" tabindex="-1"><a class="header-anchor" href="#方案一" aria-hidden="true">#</a> 方案一</h4><ol><li>在Maven中加入模块的坐标</li><li>通过ComponentScan(&quot;&quot;)扫描对应报名和默认包</li></ol><h4 id="方案二" tabindex="-1"><a class="header-anchor" href="#方案二" aria-hidden="true">#</a> 方案二</h4><ol><li>导入普通类 通过@import(对应类.class)</li><li>导入配置类 导入带有@configuration的类 类中的Bean对象会被自动导入</li><li>导入实现自ImportSelector的类 类要实现selectImports方法</li><li>通过第三方类提供的@EnableXXX 注解</li></ol><h2 id="自动配置原理" tabindex="-1"><a class="header-anchor" href="#自动配置原理" aria-hidden="true">#</a> 自动配置原理</h2><h3 id="启动类注解" tabindex="-1"><a class="header-anchor" href="#启动类注解" aria-hidden="true">#</a> 启动类注解</h3><ul><li>该注解标识在SpringBoot工程引导类上，是SpringBoot中最最最重要的注解。该注解由三个部分组成:</li><li>@SpringBootConfiguration:该注解与@Configuration注解作用相同，用来声明当前也是一个配置类。@ComponentScan:组件扫描，默认扫描当前引导类所在包及其子包。</li><li>@EnableAutoConfiguration: SpringBoot实现自动化配置的核心注解。 <ul><li>底层是Import注解 导入的是(AutoConfigurationImportselectnr.class)</li><li>AutoConfigurationImportselectnr.selectImports 获取<strong>org.springframework.boot.autoconfigure.AutoConfiguration.imports</strong>中的全类名实现注入</li><li>Spring并不会加载全部的Bean 通过<a href="">@Conditional条件注入</a>根据当前环境注入</li></ul></li></ul><h3 id="conditional条件注入" tabindex="-1"><a class="header-anchor" href="#conditional条件注入" aria-hidden="true">#</a> @Conditional条件注入</h3><ul><li>@Conditional0nClass(name = &quot;io.jsonwebtoken.Jwts&quot;)//当前环境存在指定的这个类时，才声明该bean</li><li>@ConditionalonMissingBean //当不存在当前类型的bean时，才声明该bean</li><li>Conditiona10nProperty(name = “name&quot; , havingValue = &quot;itheima&quot;)//配置文件中存在对应的属性和值，才注册bean到OC容器。</li></ul><h2 id="三层注解" tabindex="-1"><a class="header-anchor" href="#三层注解" aria-hidden="true">#</a> 三层注解</h2><h3 id="controller注解和restcontroller注解的区别" tabindex="-1"><a class="header-anchor" href="#controller注解和restcontroller注解的区别" aria-hidden="true">#</a> Controller注解和RestController注解的区别</h3><p>@Controller 包括了 @RestController。@RestController 是 Spring4 后新加的注解，从 RestController 类源码可以看出 @RestController 是 @Controller 和 @ResponseBody 两个注解的结合体。</p><p>@Controller返回对象 @ResponseBody 返回json数据 用于前端请求的异步请求</p><ul><li><p>@Controller 一般应用在有返回界面的应用场景下.</p><p>例如，管理后台使用了 thymeleaf 作为模板开发，需要从后台直接返回 Model 对象到前台，那么这时候就需要使用 @Controller 来注解。</p></li><li><p>@RestController 如果只是接口，那么就用 RestController 来注解.</p><p>例如前端页面全部使用了 Html、Jquery来开发，通过 Ajax 请求服务端接口，那么接口就使用 @RestController 统一注解。</p></li></ul><h3 id="service注解" tabindex="-1"><a class="header-anchor" href="#service注解" aria-hidden="true">#</a> @Service注解</h3><p>作用在服务层</p><h3 id="component注解" tabindex="-1"><a class="header-anchor" href="#component注解" aria-hidden="true">#</a> Component注解</h3><p>Component注解是通用型注解,用于把JavaBean注入到Spring IOC容器中用以自动注入</p><p>Controller、Service、Repository三个是其具体注解分别表示控制层、服务层、持久层(Dao层 Data Access Object)数据访问层</p><h3 id="mapper注解" tabindex="-1"><a class="header-anchor" href="#mapper注解" aria-hidden="true">#</a> mapper注解</h3><p>mybatis的专有注解用于数据访问</p><h3 id="repository" tabindex="-1"><a class="header-anchor" href="#repository" aria-hidden="true">#</a> Repository</h3><p>持久层注解</p><h2 id="全局异常捕获器" tabindex="-1"><a class="header-anchor" href="#全局异常捕获器" aria-hidden="true">#</a> 全局异常捕获器</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestControllerAdvice</span>  <span class="token comment">// =@ControllerAdvice+@responseBody</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">ex</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;对不起，操作失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring请求拦截器" tabindex="-1"><a class="header-anchor" href="#spring请求拦截器" aria-hidden="true">#</a> Spring请求拦截器</h2><ol><li>定义拦截器类继承自HandlerInterceptor</li><li>实现HandlerInterceptor中的方法</li><li>定义config类实现自WebMvcConfigurer</li><li>实现addInterceptors方法</li><li>通过拦截器注册器注册拦截器并配置拦截路径和排除路径</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span> 			                     		registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>loginCheckInterceptor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transaction事务注解" tabindex="-1"><a class="header-anchor" href="#transaction事务注解" aria-hidden="true">#</a> transaction事务注解</h3><p>事务是一组操作的集合，它是一个不可分割的工作单位，这些操作要么同时成功，要么同时失败</p><p>加上transaction注解之后Spring框架会自动开启事务、碰到异常后会自动回滚事务</p><p>默认情况下transaction只在运行时异常会回滚</p><p>加上Transactional(rollbackFor = Exception.class)后会回滚所有异常</p><p>当出现事务传播之后参数propagation用来控制事务传播行为</p><p>如果有无论如何都要执行的代码时则需要开启新事务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRES</span>  <span class="token comment">//表示加入事务</span>
propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRES_NEW</span>  <span class="token comment">//表示开启新事务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,51),m={id:"jwt令牌",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#jwt令牌","aria-hidden":"true"},"#",-1),b={href:"https://jwt.io",target:"_blank",rel:"noopener noreferrer"},g=a(`<ul><li>传统的客户端cookie和服务器端session会话跟踪技术都存在着许多问题</li></ul><p>例如:</p><ul><li><p>cookie无法在移动端使用、用户可以自己禁用cookie、cookie不能跨域</p></li><li><p>session无法在服务器集群的情况下直接使用、用于session基于cookie所以包含cookie的所有缺点</p></li></ul><p><strong>JWT令牌</strong>定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jwt生成" tabindex="-1"><a class="header-anchor" href="#jwt生成" aria-hidden="true">#</a> JWT生成</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wja&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> jwt <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span><span class="token constant">HS256</span><span class="token punctuation">,</span> <span class="token string">&quot;wja&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jwt解析" tabindex="-1"><a class="header-anchor" href="#jwt解析" aria-hidden="true">#</a> JWT解析</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span><span class="token string">&quot;JWT密钥&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span><span class="token string">&quot;JWT令牌&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring配置项" tabindex="-1"><a class="header-anchor" href="#spring配置项" aria-hidden="true">#</a> Spring配置项</h2><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># mybatis-plus日志</span>
<span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>
    <span class="token key atrule">configuration</span><span class="token punctuation">:</span>
        <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token comment"># mysql配置</span>
        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/tlias
        <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">servlet</span><span class="token punctuation">:</span>
        <span class="token key atrule">multipart</span><span class="token punctuation">:</span>
        <span class="token comment"># 单次上传文件的大小限制</span>
            <span class="token key atrule">max-file-size</span><span class="token punctuation">:</span> 10MB
        <span class="token comment"># 一次性上传多个文件的大小限制</span>
            <span class="token key atrule">max-request-size</span><span class="token punctuation">:</span> 100MB
<span class="token comment"># 阿里云OSS配置  配合配置自动注入</span>
<span class="token key atrule">aliyun</span><span class="token punctuation">:</span>
    <span class="token key atrule">oss</span><span class="token punctuation">:</span>
        <span class="token key atrule">endpoint</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//oss<span class="token punctuation">-</span>cn<span class="token punctuation">-</span>beijing.aliyuncs.com
        <span class="token key atrule">accessKeyId</span><span class="token punctuation">:</span> LTAI5tC2BmQiA5TqV7rJRLjC
        <span class="token key atrule">accessKeySecret</span><span class="token punctuation">:</span> 7fLw89vMJjTWnxZ7DhDEgi6GXidWRS
        <span class="token key atrule">bucketName</span><span class="token punctuation">:</span> web<span class="token punctuation">-</span>tlias<span class="token punctuation">-</span>wja<span class="token punctuation">-</span>test
<span class="token comment">#开启事务管理的日志</span>
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
    <span class="token key atrule">level</span><span class="token punctuation">:</span>
      <span class="token key atrule">org.springframework.jdbc.support.JdbcTransactionManager</span><span class="token punctuation">:</span> debug

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aop面向切面编程" tabindex="-1"><a class="header-anchor" href="#aop面向切面编程" aria-hidden="true">#</a> AOP面向切面编程</h2><p>AOP: Aspect Oriented Programming (面向切面编程、面向方面编程)，其实就是面向特定方法编程。(其实就是动态代理技术)</p><ul><li>动态代理是面向切面编程最主流的实现。而SpringAOP是Spring框架的高级技术，旨在管理bean对象的过程中，主要通过底层的心动态代理机制，对特定的方法进行编程。</li><li>一但切入点类或方法被执行Spring IOC 注入的则是被通知增强之后的代理对象,并非常规的对象</li></ul><h3 id="在maven中引入springaop" tabindex="-1"><a class="header-anchor" href="#在maven中引入springaop" aria-hidden="true">#</a> 在Maven中引入SpringAOP</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="springaop快速入门" tabindex="-1"><a class="header-anchor" href="#springaop快速入门" aria-hidden="true">#</a> SpringAOP快速入门</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Aspect</span>  <span class="token comment">//AOP类</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeAspect</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 记录运行时间
     *
     * <span class="token keyword">@param</span> <span class="token parameter">pjp</span> pjp
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Object</span></span><span class="token punctuation">}</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">Throwable</span></span> throwable
     */</span>
    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.wja.tlias_project.service.*.*(..))&quot;</span><span class="token punctuation">)</span> <span class="token comment">//切入点表达式</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">recordRunningTime</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//调用原始方法且保存原始方法的返回值</span>
        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;方法的耗时为{}ms&quot;</span><span class="token punctuation">,</span> endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token comment">//返回原始方法的返回值</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aop通知类型" tabindex="-1"><a class="header-anchor" href="#aop通知类型" aria-hidden="true">#</a> AOP通知类型</h3><ul><li><p>@Around:环绕通知 环绕通知，此注解标注的通知方法在目标方法前、后都被执行</p><ul><li>@Around环绕通知需要自己调用ProceedingJoinPoint.proceed(）来让原始方法执行，其他通知不需要考虑目标方法执行</li><li>@Around环绕通知方法的返回值，必须指定为object，来接收原始方法的返回值。</li></ul></li><li><p>@Before:前置通知，此注解标注的通知方法在目标方法前被执行</p></li><li><p>@After :后置通知，此注解标注的通知方法在目标方法后被执行，无论是否有异常都会执行</p></li><li><p>@AfterReturning : 返回后通知，此注解标注的通知方法在目标方法后被执行，有异常不会执行</p></li><li><p>@AfterThrowing :异常后通知，此注解标注的通知方法发生异常后执行</p></li></ul><h3 id="pointcut切入点表达式提取" tabindex="-1"><a class="header-anchor" href="#pointcut切入点表达式提取" aria-hidden="true">#</a> PointCut切入点表达式提取</h3><p>该注解的作用是将公共的切点表达式抽取出来，需要用到时引用该切点表达式即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(&quot;</span>&quot;<span class="token punctuation">)</span>&quot;<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="order控制通知执行顺序" tabindex="-1"><a class="header-anchor" href="#order控制通知执行顺序" aria-hidden="true">#</a> @Order控制通知执行顺序</h3><p>用@Order(数字)加在切面类上来控制顺序</p><p>目标方法前的通知方法:数字小的先执行</p><p>目标方法后的通知方法:数字小的后执行</p><h3 id="切入点表达式" tabindex="-1"><a class="header-anchor" href="#切入点表达式" aria-hidden="true">#</a> 切入点表达式</h3><p>当匹配的多个方法之间没有共同的特征时 可以用**||<strong>、</strong>&amp;&amp;、!非)**进行连接</p><h4 id="execution" tabindex="-1"><a class="header-anchor" href="#execution" aria-hidden="true">#</a> execution</h4><p>execution主要根据方法的返回值、包名、类名、方法名、方法参数等信息来匹配，语法为:<strong>execution(访问修饰符?返回值包名.类名.?方法名(方法参数) throws异常?)</strong></p><h4 id="annotation-注解全类名" tabindex="-1"><a class="header-anchor" href="#annotation-注解全类名" aria-hidden="true">#</a> @annotation(注解全类名)</h4><p>@annotation切入点表达式，用于匹配标识有特定注解的方法。</p><h4 id="通配符" tabindex="-1"><a class="header-anchor" href="#通配符" aria-hidden="true">#</a> 通配符</h4><p>* 单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分</p><blockquote><p>execution(* com.<em>.service.</em>.update*(*))</p></blockquote><p>.. 多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</p><blockquote><p>execution(* com.itheima. .Deptservice.*( .. ))</p></blockquote><h3 id="切入点书写建议" tabindex="-1"><a class="header-anchor" href="#切入点书写建议" aria-hidden="true">#</a> 切入点书写建议</h3><ul><li>所有业务方法名在命名时尽量规范，方便切入点表达式快速匹配。如:查询类方法都是find开头，更新类方法都是update开头</li><li>描述切入点方法通常基于接口描述，而不是直接描述实现类，增强拓展性。</li><li>在满足业务需要的前提下，尽量缩小切入点的匹配范围。如:包名匹配尽量不使用...，使用*匹配单个包。</li></ul><h2 id="maven高级" tabindex="-1"><a class="header-anchor" href="#maven高级" aria-hidden="true">#</a> Maven高级</h2><h3 id="分模块设计与开发" tabindex="-1"><a class="header-anchor" href="#分模块设计与开发" aria-hidden="true">#</a> 分模块设计与开发</h3><ul><li>尽量将项目分成多个模块以方便管理</li><li>将公共部分提取出来 (例如实体类,工具类)</li></ul><h3 id="maven依赖继承" tabindex="-1"><a class="header-anchor" href="#maven依赖继承" aria-hidden="true">#</a> Maven依赖继承</h3>`,44),h=n("li",null,"在pom文件中定义parent标签来继承父工程",-1),y=n("li",null,"通过relativePath指定父工程的pom文件位置",-1),f=a(`<h2 id="版本锁定" tabindex="-1"><a class="header-anchor" href="#版本锁定" aria-hidden="true">#</a> 版本锁定</h2><ul><li>通过父工程统一管理子工程的依赖版本</li><li>通过dependencyManagement统一管理</li></ul><blockquote><p>dependencyManagement不会引入依赖</p></blockquote><ul><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
    	&lt;dependency&gt;
    	
    	&lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="属性引用" tabindex="-1"><a class="header-anchor" href="#属性引用" aria-hidden="true">#</a> 属性引用</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lombok.version</span><span class="token punctuation">&gt;</span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lombok.version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a1</span><span class="token punctuation">&gt;</span></span>\${lombok.version}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a1</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="maven聚合" tabindex="-1"><a class="header-anchor" href="#maven聚合" aria-hidden="true">#</a> Maven聚合</h3><p>将多个模块组织成一个整体，同时进行项目的构建。</p><p>maven中可以通过&lt;modules&gt;设置当前聚合工程所包含的子模块名称</p><h3 id="maven私服" tabindex="-1"><a class="header-anchor" href="#maven私服" aria-hidden="true">#</a> Maven私服</h3><p>私服是一种特殊的远程仓库，它是架设在局域网内的仓库服务，用来代理位于外部的中央仓库，用于解决团队内部的资源共享与资源同步问题。</p><h2 id="公共字段自动填充" tabindex="-1"><a class="header-anchor" href="#公共字段自动填充" aria-hidden="true">#</a> 公共字段自动填充</h2><h3 id="_1-1-问题分析" tabindex="-1"><a class="header-anchor" href="#_1-1-问题分析" aria-hidden="true">#</a> 1.1 问题分析</h3><p>在上一章节我们已经完成了后台系统的<strong>员工管理功能</strong>和<strong>菜品分类功能</strong>的开发，在<strong>新增员工</strong>或者<strong>新增菜品分类</strong>时需要设置创建时间、创建人、修改时间、修改人等字段，在<strong>编辑员工</strong>或者<strong>编辑菜品分类</strong>时需要设置修改时间、修改人等字段。这些字段属于公共字段，也就是也就是在我们的系统中很多表中都会有这些字段，如下：</p><table><thead><tr><th><strong>序号</strong></th><th><strong>字段名</strong></th><th><strong>含义</strong></th><th><strong>数据类型</strong></th></tr></thead><tbody><tr><td>1</td><td>create_time</td><td>创建时间</td><td>datetime</td></tr><tr><td>2</td><td>create_user</td><td>创建人id</td><td>bigint</td></tr><tr><td>3</td><td>update_time</td><td>修改时间</td><td>datetime</td></tr><tr><td>4</td><td>update_user</td><td>修改人id</td><td>bigint</td></tr></tbody></table><p>而针对于这些字段，我们的赋值方式为：</p><p>1). 在新增数据时, 将createTime、updateTime 设置为当前时间, createUser、updateUser设置为当前登录用户ID。</p><p>2). 在更新数据时, 将updateTime 设置为当前时间, updateUser设置为当前登录用户ID。</p><p>目前,在我们的项目中处理这些字段都是在每一个业务方法中进行赋值操作</p><h3 id="_1-2-实现思路" tabindex="-1"><a class="header-anchor" href="#_1-2-实现思路" aria-hidden="true">#</a> 1.2 实现思路</h3><p>在实现公共字段自动填充，也就是在插入或者更新的时候为指定字段赋予指定的值，使用它的好处就是可以统一对这些字段进行处理，避免了重复代码。在上述的问题分析中，我们提到有四个公共字段，需要在新增/更新中进行赋值操作, 具体情况如下:</p><table><thead><tr><th><strong>序号</strong></th><th><strong>字段名</strong></th><th><strong>含义</strong></th><th><strong>数据类型</strong></th><th><strong>操作类型</strong></th></tr></thead><tbody><tr><td>1</td><td>create_time</td><td>创建时间</td><td>datetime</td><td>insert</td></tr><tr><td>2</td><td>create_user</td><td>创建人id</td><td>bigint</td><td>insert</td></tr><tr><td>3</td><td>update_time</td><td>修改时间</td><td>datetime</td><td>insert、update</td></tr><tr><td>4</td><td>update_user</td><td>修改人id</td><td>bigint</td><td>insert、update</td></tr></tbody></table><p><strong>实现步骤：</strong></p><p>1). 自定义注解 AutoFill，用于标识需要进行公共字段自动填充的方法</p><p>2). 自定义切面类 AutoFillAspect，统一拦截加入了 AutoFill 注解的方法，通过反射为公共字段赋值</p><p>3). 在 Mapper 的方法上加入 AutoFill 注解</p><p>若要实现上述步骤，需掌握以下知识(之前课程内容都学过)</p><p>**技术点：**枚举、注解、AOP、反射</p><h3 id="_1-3-代码开发" tabindex="-1"><a class="header-anchor" href="#_1-3-代码开发" aria-hidden="true">#</a> 1.3 代码开发</h3><p>按照上一小节分析的实现步骤依次实现，共三步。</p><h4 id="_1-3-1-步骤一" tabindex="-1"><a class="header-anchor" href="#_1-3-1-步骤一" aria-hidden="true">#</a> 1.3.1 步骤一</h4><p><strong>自定义注解 AutoFill</strong></p><p>进入到sky-server模块，创建com.sky.annotation包。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>annotation</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>enumeration<span class="token punctuation">.</span></span><span class="token class-name">OperationType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 自定义注解，用于标识某个方法需要进行功能字段自动填充处理
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">AutoFill</span> <span class="token punctuation">{</span>
    <span class="token comment">//数据库操作类型：UPDATE INSERT</span>
    <span class="token class-name">OperationType</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中OperationType已在sky-common模块中定义</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>enumeration</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 数据库操作类型
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">OperationType</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 更新操作
     */</span>
    <span class="token constant">UPDATE</span><span class="token punctuation">,</span>

    <span class="token doc-comment comment">/**
     * 插入操作
     */</span>
    <span class="token constant">INSERT</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-2-步骤二" tabindex="-1"><a class="header-anchor" href="#_1-3-2-步骤二" aria-hidden="true">#</a> 1.3.2 步骤二</h4><p><strong>自定义切面 AutoFillAspect</strong></p><p>在sky-server模块，创建com.sky.aspect包。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>aspect</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 自定义切面，实现公共字段自动填充处理逻辑
 */</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoFillAspect</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 切入点
     */</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.sky.mapper.*.*(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">autoFillPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 前置通知，在通知中进行公共字段的赋值
     */</span>
    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;autoFillPointCut()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">autoFill</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">/////////////////////重要////////////////////////////////////</span>
        <span class="token comment">//可先进行调试，是否能进入该方法 提前在mapper方法添加AutoFill注解</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;开始进行公共字段自动填充...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>完善自定义切面 AutoFillAspect 的 autoFill 方法</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>aspect</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AutoFill</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>constant<span class="token punctuation">.</span></span><span class="token class-name">AutoFillConstant</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">BaseContext</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>enumeration<span class="token punctuation">.</span></span><span class="token class-name">OperationType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">JoinPoint</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Aspect</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Before</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Pointcut</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">MethodSignature</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 自定义切面，实现公共字段自动填充处理逻辑
 */</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoFillAspect</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 切入点
     */</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* com.sky.mapper.*.*(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">autoFillPointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 前置通知，在通知中进行公共字段的赋值
     */</span>
    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;autoFillPointCut()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">autoFill</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;开始进行公共字段自动填充...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//获取到当前被拦截的方法上的数据库操作类型</span>
        <span class="token class-name">MethodSignature</span> signature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//方法签名对象</span>
        <span class="token class-name">AutoFill</span> autoFill <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">AutoFill</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得方法上的注解对象</span>
        <span class="token class-name">OperationType</span> operationType <span class="token operator">=</span> autoFill<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得数据库操作类型</span>

        <span class="token comment">//获取到当前被拦截的方法的参数--实体对象</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>args <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Object</span> entity <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment">//准备赋值的数据</span>
        <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Long</span> currentId <span class="token operator">=</span> <span class="token class-name">BaseContext</span><span class="token punctuation">.</span><span class="token function">getCurrentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//根据当前不同的操作类型，为对应的属性通过反射来赋值</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>operationType <span class="token operator">==</span> <span class="token class-name">OperationType</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//为4个公共字段赋值</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Method</span> setCreateTime <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token class-name">AutoFillConstant</span><span class="token punctuation">.</span><span class="token constant">SET_CREATE_TIME</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Method</span> setCreateUser <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token class-name">AutoFillConstant</span><span class="token punctuation">.</span><span class="token constant">SET_CREATE_USER</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Method</span> setUpdateTime <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token class-name">AutoFillConstant</span><span class="token punctuation">.</span><span class="token constant">SET_UPDATE_TIME</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Method</span> setUpdateUser <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token class-name">AutoFillConstant</span><span class="token punctuation">.</span><span class="token constant">SET_UPDATE_USER</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//通过反射为对象属性赋值</span>
                setCreateTime<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
                setCreateUser<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span>currentId<span class="token punctuation">)</span><span class="token punctuation">;</span>
                setUpdateTime<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
                setUpdateUser<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span>currentId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>operationType <span class="token operator">==</span> <span class="token class-name">OperationType</span><span class="token punctuation">.</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//为2个公共字段赋值</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Method</span> setUpdateTime <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token class-name">AutoFillConstant</span><span class="token punctuation">.</span><span class="token constant">SET_UPDATE_TIME</span><span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Method</span> setUpdateUser <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token class-name">AutoFillConstant</span><span class="token punctuation">.</span><span class="token constant">SET_UPDATE_USER</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//通过反射为对象属性赋值</span>
                setUpdateTime<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
                setUpdateUser<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span>currentId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-3-3-步骤三" tabindex="-1"><a class="header-anchor" href="#_1-3-3-步骤三" aria-hidden="true">#</a> 1.3.3 步骤三</h4><p><strong>在Mapper接口的方法上加入 AutoFill 注解</strong></p><p>以<strong>CategoryMapper</strong>为例，分别在新增和修改方法添加@AutoFill()注解，也需要<strong>EmployeeMapper</strong>做相同操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sky<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CategoryMapper</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 插入数据
     * <span class="token keyword">@param</span> <span class="token parameter">category</span>
     */</span>
    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into category(type, name, sort, status, create_time, update_time, create_user, update_user)&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot; VALUES&quot;</span> <span class="token operator">+</span>
            <span class="token string">&quot; (#{type}, #{name}, #{sort}, #{status}, #{createTime}, #{updateTime}, #{createUser}, #{updateUser})&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@AutoFill</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">OperationType</span><span class="token punctuation">.</span><span class="token constant">INSERT</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Category</span> category<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 根据id修改分类
     * <span class="token keyword">@param</span> <span class="token parameter">category</span>
     */</span>
    <span class="token annotation punctuation">@AutoFill</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">OperationType</span><span class="token punctuation">.</span><span class="token constant">UPDATE</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Category</span> category<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>同时</strong>，将业务层为公共字段赋值的代码注释掉。</p><p>1). 将员工管理的新增和编辑方法中的公共字段赋值的代码注释。</p><p>2). 将菜品分类管理的新增和修改方法中的公共字段赋值的代码注释。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><figure><img src="`+r+'" alt="image-20230608112251533" tabindex="0" loading="lazy"><figcaption>image-20230608112251533</figcaption></figure>',51);function w(x,j){const p=t("ExternalLinkIcon"),o=t("packaging");return i(),l("div",null,[k,n("h2",m,[v,s(),n("a",b,[s("JWT令牌"),e(p)])]),g,n("ul",null,[h,y,n("li",null,[s("指定打包方式为pom "),e(o,null,{default:u(()=>[s("pom")]),_:1})])]),f])}const A=c(d,[["render",w],["__file","SpringBoot笔记.html.vue"]]);export{A as default};
